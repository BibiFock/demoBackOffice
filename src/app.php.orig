<?php

use Silex\Provider\SessionServiceProvider;
use Silex\Provider\SecurityServiceProvider;
use Silex\Provider\FormServiceProvider;
<<<<<<< HEAD
use Symfony\Component\HttpFoundation\Request;
use Silex\Provider\TwigServiceProvider;
use Silex\Provider\UrlGeneratorServiceProvider;
use Silex\Provider\TranslationServiceProvider;
=======
use Silex\Provider\TwigServiceProvider;
use Silex\Provider\UrlGeneratorServiceProvider;
use Silex\Provider\TranslationServiceProvider;
use Silex\Provider\DoctrineServiceProvider;
use Silex\Provider\ValidatorServiceProvider;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Encoder\PlaintextPasswordEncoder;
>>>>>>> new_branch_name

$app->register(new TranslationServiceProvider());
$app->register(new SessionServiceProvider());
$app->register(new FormServiceProvider());
<<<<<<< HEAD
$app->register(new UrlGeneratorServiceProvider());
=======
$app->register(new ValidatorServiceProvider());
$app->register(new UrlGeneratorServiceProvider());

>>>>>>> new_branch_name
$app->register(new TwigServiceProvider(), array(
    'twig.options'        => array(
        'strict_variables' => true
    ),
<<<<<<< HEAD
    'twig.form.templates' => array('form_div_layout.html.twig'),
    'twig.path'           => array(__DIR__ . '/../resources/views')
));

$app->register(new SecurityServiceProvider(), array(
    'security.firewalls' => array(
        'admin' => array(
            'pattern' => '^/',
            'form'    => array(
                'login_path'         => '/login',
                'username_parameter' => 'form[username]',
                'password_parameter' => 'form[password]',
            ),
            'logout'    => true,
            'anonymous' => true,
            'users'     => $app['security.users'],
        ),
    ),
));
=======
    'twig.path'           => array(__DIR__ . '/../resources/views'),
));

$app->register(new DoctrineServiceProvider(), array(
	'db.options' => array(
		'driver'   => 'pdo_mysql',
		'host'     => '127.0.0.1',
		'dbname'   => 'demoBackOffice',
		'user'     => 'root',
		'password' => '',
	)
));

$app->register(new SecurityServiceProvider(), array(
	'security.firewalls' => array(
		'manage' => array(
			'pattern' => '^/manage/',
			'form'    => array(
				'login_path'         => '/login',
				'check_path'         => '/manage/login_check',
				'default_target_path' => '/manage/',
				'always_use_default_target_path' => true,
				'username_parameter' => 'form[username]',
				'password_parameter' => 'form[password]',
			),
			'logout' => array(
				'logout_path' => "/manage/logout",
		        'target' => '/',
			),
			'anonymous' => false,
			'users' => 
				$app->share(function () use ($app) {
					return new DemoBackOffice\Model\UserProvider($app);
				})
		),
		'web' => array(
			'pattern' => '^/',
			'anonymous' => true,
		),
	),
	'security.access_rules' => array(
		array('^/manage/', 'ROLE_ADMIN'),
	),
));

$app['security.encoder.digest'] = $app->share(function ($app) {
    return new PlaintextPasswordEncoder();
});

$app['manager.section'] = $app->share(function () use ($app) {
	return new DemoBackOffice\Model\SectionManager($app['db']);
});

$app['manager.rights'] = $app->share(function () use ($app) {
	return new DemoBackOffice\Model\UserTypeManager($app['db']);
});

>>>>>>> new_branch_name
